name: Publish Quarkus Image

on:
  workflow_call:
    inputs:
      java_version:
        description: 'Java version'
        required: true
        default: '17'
        type: string
      version:
        description: 'Application version'
        required: true
        type: string
      profile:
        description: 'Maven profile'
        required: false
        default: ''
        type: string
      tags:
        description: 'Docker image tags'
        required: true
        type: string
      dockerfile:
        description: 'Path to the Dockerfile'
        required: true
        type: string

env:
  REGISTRY_REPO: ghcr.io/${{ github.repository }}

jobs:
  build-images:
    strategy:
      matrix:
        arch:
          - handle: amd64
            os: ubuntu-24.04
          - handle: arm64
            os: ubuntu-24.04-arm
    runs-on: ${{ matrix.arch.os }}
    steps:
      # Set up all tools
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ inputs.java_version }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '${{ inputs.java_version }}'
          cache: 'maven'
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # Build app and image
      - name: Set project version
        run: mvn versions:set -DnewVersion=${{ inputs.version }} > /dev/null
      - name: Build Quarkus app
        run: >-
          ./mvnw package ${{ inputs.profile && format('-P{0}', inputs.profile) || '' }}
          -Dquarkus.native.container-build=true
          -Dquarkus.native.container-runtime-options=--platform=linux/${{ matrix.arch.handle }}
        env:
          MAVEN_ARGS: '--batch-mode -T 1C --errors --fail-at-end --show-version -DskipTests'
      - name: Generate Metadata
        uses: docker/metadata-action@v5
        id: meta
      - name: Build & push Digest for linux/${{ matrix.arch.handle }}
        uses: docker/build-push-action@v6
        id: build
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          platforms: linux/${{ matrix.arch.handle }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY_REPO }},push-by-digest=true,name-canonical=true,push=true
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}" # remove sha256:-prefix to avoid issues with filenames
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ hashFiles(inputs.dockerfile) }}-${{ matrix.arch.handle }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge-digests:
    runs-on: ubuntu-latest
    needs: build-images
    steps:
      # Needed to hash files
      - uses: actions/checkout@v4
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          pattern: digests-${{ hashFiles(inputs.dockerfile) }}-*
          path: /tmp/digests
          merge-multiple: true
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Prepare tags
        run: |
          tags=''

          while IFS= read -r tag || [[ -n "$tag" ]]; do
            if [[ -n "$tag" ]]; then
              tags="${tags} -t ${{ env.REGISTRY_REPO }}:$tag"
            fi
          done < <(printf '%s' "$TAGS")

          echo "REPO_TAGS=${tags}" >> $GITHUB_ENV
        env:
          TAGS: ${{ inputs.tags }}
      - name: Merge digests
        working-directory: /tmp/digests
        run: docker buildx imagetools create $REPO_TAGS $(printf '${{ env.REGISTRY_REPO }}@sha256:%s ' *)